// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SqlPlastic.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("DefaultConfig")]
    public partial class DefaultConfigFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "DefaultConfig.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "DefaultConfig", "\tModel building with the default options and mapping rules", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify all datatypes are mapped correctly by default")]
        public virtual void VerifyAllDatatypesAreMappedCorrectlyByDefault()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify all datatypes are mapped correctly by default", ((string[])(null)));
#line 4
 this.ScenarioSetup(scenarioInfo);
#line 5
 testRunner.Given("a connection to the \"SqlPlasticTestDB\" database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 6
 testRunner.When("I generate models with the default options", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column Name",
                        "Member Type"});
            table1.AddRow(new string[] {
                        "MyDataTypeID",
                        "int"});
            table1.AddRow(new string[] {
                        "MyBool",
                        "bool"});
            table1.AddRow(new string[] {
                        "MyTinyInt",
                        "byte"});
            table1.AddRow(new string[] {
                        "MyInt",
                        "int"});
            table1.AddRow(new string[] {
                        "MyBigInt",
                        "long"});
            table1.AddRow(new string[] {
                        "MySmallMoney",
                        "decimal"});
            table1.AddRow(new string[] {
                        "MyMoney",
                        "decimal"});
            table1.AddRow(new string[] {
                        "MyDecimal",
                        "decimal"});
            table1.AddRow(new string[] {
                        "MyNumeric",
                        "decimal"});
            table1.AddRow(new string[] {
                        "MyReal",
                        "float"});
            table1.AddRow(new string[] {
                        "MyFloat",
                        "double"});
            table1.AddRow(new string[] {
                        "MyChar1",
                        "char"});
            table1.AddRow(new string[] {
                        "MyChar10",
                        "string"});
            table1.AddRow(new string[] {
                        "MyVarChar100",
                        "string"});
            table1.AddRow(new string[] {
                        "MyVarCharMax",
                        "string"});
            table1.AddRow(new string[] {
                        "MyNVarChar100",
                        "string"});
            table1.AddRow(new string[] {
                        "MyText",
                        "string"});
            table1.AddRow(new string[] {
                        "MyXML",
                        "System.Xml.Linq.XElement"});
            table1.AddRow(new string[] {
                        "MySmallDateTime",
                        "System.DateTime"});
            table1.AddRow(new string[] {
                        "MyDateTime",
                        "System.DateTime"});
            table1.AddRow(new string[] {
                        "MyDateTime2",
                        "System.DateTime"});
            table1.AddRow(new string[] {
                        "MyDateTimeOffset",
                        "System.DateTimeOffset"});
            table1.AddRow(new string[] {
                        "MyDate",
                        "System.DateTime"});
            table1.AddRow(new string[] {
                        "MyTime",
                        "System.Timespan"});
            table1.AddRow(new string[] {
                        "MyBinary50",
                        "System.Data.Linq.Binary"});
            table1.AddRow(new string[] {
                        "MyVarBinary60",
                        "System.Data.Linq.Binary"});
            table1.AddRow(new string[] {
                        "MyVarBinaryMax",
                        "System.Data.Linq.Binary"});
            table1.AddRow(new string[] {
                        "MyTimeStamp",
                        "System.Data.Linq.Binary"});
            table1.AddRow(new string[] {
                        "MyGUID",
                        "System.GUID"});
#line 7
 testRunner.Then("the resulting table \"MyDataTypes\" should contain exactly the following columns", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("All tables, columns, and keys should be present")]
        public virtual void AllTablesColumnsAndKeysShouldBePresent()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("All tables, columns, and keys should be present", ((string[])(null)));
#line 39
this.ScenarioSetup(scenarioInfo);
#line 40
 testRunner.Given("a connection to the \"SqlPlasticTestDB\" database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 41
 testRunner.When("I generate models with the default options", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "TableName",
                        "Columns",
                        "EntityRefs",
                        "EntitySets"});
            table2.AddRow(new string[] {
                        "Customers",
                        "3",
                        "0",
                        "4"});
            table2.AddRow(new string[] {
                        "Products",
                        "3",
                        "0",
                        "1"});
            table2.AddRow(new string[] {
                        "Orders",
                        "3",
                        "1",
                        "1"});
            table2.AddRow(new string[] {
                        "OrderLineItems",
                        "4",
                        "2",
                        "0"});
            table2.AddRow(new string[] {
                        "Employees",
                        "3",
                        "1",
                        "1"});
            table2.AddRow(new string[] {
                        "Preferences",
                        "4",
                        "3",
                        "0"});
            table2.AddRow(new string[] {
                        "MyDataTypes",
                        "29",
                        "0",
                        "0"});
#line 42
 testRunner.Then("the resulting model should contain the following tables", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Entity Refs 1 - Self reference should end in a 1 by default")]
        public virtual void EntityRefs1_SelfReferenceShouldEndInA1ByDefault()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Entity Refs 1 - Self reference should end in a 1 by default", ((string[])(null)));
#line 53
this.ScenarioSetup(scenarioInfo);
#line 54
 testRunner.Given("a connection to the \"SqlPlasticTestDB\" database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 55
 testRunner.When("I generate models with the default options", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "EntityRefName",
                        "KeyColumn",
                        "ReferencedColumn",
                        "AssociatedSet",
                        "ForeignKeyName",
                        "DeleteRule",
                        "DeleteOnNull"});
            table3.AddRow(new string[] {
                        "Employee1",
                        "ManagerEmployeeID",
                        "EmployeeID",
                        "Employees",
                        "FK_ManagerID",
                        "NO_ACTION",
                        "false"});
#line 56
 testRunner.Then("the table \"Employees\" should contain the following entity references", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Entity Refs 2")]
        public virtual void EntityRefs2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Entity Refs 2", ((string[])(null)));
#line 60
this.ScenarioSetup(scenarioInfo);
#line 61
 testRunner.Given("a connection to the \"SqlPlasticTestDB\" database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 62
 testRunner.When("I generate models with the default options", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "EntityRefName",
                        "KeyColumn",
                        "ReferencedColumn",
                        "AssociatedSet",
                        "ForeignKeyName",
                        "DeleteRule",
                        "DeleteOnNull"});
            table4.AddRow(new string[] {
                        "Order",
                        "LineOrderID",
                        "OrderID",
                        "OrderLineItems",
                        "FK_Orders",
                        "CASCADE",
                        "true"});
            table4.AddRow(new string[] {
                        "Product",
                        "LineProductID",
                        "ProductID",
                        "OrderLineItems",
                        "FK_Products",
                        "CASCADE",
                        "true"});
#line 63
 testRunner.Then("the table \"OrderLineItems\" should contain the following entity references", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Entity Sets 1")]
        public virtual void EntitySets1()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Entity Sets 1", ((string[])(null)));
#line 68
this.ScenarioSetup(scenarioInfo);
#line 69
 testRunner.Given("a connection to the \"SqlPlasticTestDB\" database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 70
 testRunner.When("I generate models with the default options", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "EntitySetName",
                        "KeyColumn",
                        "ReferencedColumn",
                        "AssociatedRef",
                        "ForeignKeyName",
                        "DeleteRule"});
            table5.AddRow(new string[] {
                        "Orders",
                        "CustomerID",
                        "OrderCustomerID",
                        "Customer",
                        "FK_Customers",
                        "CASCADE"});
            table5.AddRow(new string[] {
                        "Preferences",
                        "CustomerID",
                        "CustomerID_A",
                        "Customer",
                        "FK_CustomerID_A",
                        "NO_ACTION"});
            table5.AddRow(new string[] {
                        "Preferences1",
                        "CustomerID",
                        "CustomerID_B",
                        "Customer1",
                        "FK_CustomerID_B",
                        "NO_ACTION"});
            table5.AddRow(new string[] {
                        "Preferences2",
                        "CustomerID",
                        "CustomerID_C",
                        "Customer2",
                        "FK_CustomerID_C",
                        "NO_ACTION"});
#line 71
 testRunner.Then("the table \"Customers\" should contain the following entity sets", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Column Attributes")]
        public virtual void ColumnAttributes()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Column Attributes", ((string[])(null)));
#line 78
this.ScenarioSetup(scenarioInfo);
#line 79
 testRunner.Given("a connection to the \"SqlPlasticTestDB\" database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 80
 testRunner.When("I generate models with the default options", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "AttributeName",
                        "AttributeValue"});
            table6.AddRow(new string[] {
                        "Storage",
                        "\"_MyTimeStamp\""});
            table6.AddRow(new string[] {
                        "AutoSync",
                        "AutoSync.Always"});
            table6.AddRow(new string[] {
                        "DbType",
                        "\"rowversion NOT NULL\""});
            table6.AddRow(new string[] {
                        "CanBeNull",
                        "false"});
            table6.AddRow(new string[] {
                        "IsDbGenerated",
                        "true"});
            table6.AddRow(new string[] {
                        "IsVersion",
                        "true"});
            table6.AddRow(new string[] {
                        "UpdateCheck",
                        "UpdateCheck.Never"});
#line 81
 testRunner.Then("the column \"dbo.MyDataTypes.MyTimeStamp\" should have the following Column Attribu" +
                    "tes", ((string)(null)), table6, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
