// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SqlPlastic.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("MappingRules")]
    public partial class MappingRulesFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "MappingRules.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "MappingRules", "\tMapping rules can be used to configure EntitySets and EntityRefs", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Foreign Key Mapping 1")]
        [NUnit.Framework.CategoryAttribute("MappingRules")]
        public virtual void ForeignKeyMapping1()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Foreign Key Mapping 1", new string[] {
                        "MappingRules"});
#line 5
this.ScenarioSetup(scenarioInfo);
#line 6
 testRunner.Given("a connection to the \"SqlPlasticTestDB\" database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "ForeingKeyName",
                        "EntityRefName",
                        "EntitySetName",
                        "DeleteOnNull"});
            table1.AddRow(new string[] {
                        "FK_Orders",
                        "MyOrder",
                        "McOrdersSet",
                        "true"});
#line 7
 testRunner.And("the following foreign key mapping rules for table \"dbo.OrderLineItems\"", ((string)(null)), table1, "And ");
#line 10
 testRunner.When("I generate models with the default options", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "EntityRefName",
                        "KeyColumn",
                        "ReferencedColumn",
                        "AssociatedSet",
                        "ForeignKeyName",
                        "DeleteRule",
                        "DeleteOnNull"});
            table2.AddRow(new string[] {
                        "MyOrder",
                        "LineOrderID",
                        "OrderID",
                        "McOrdersSet",
                        "FK_Orders",
                        "CASCADE",
                        "true"});
            table2.AddRow(new string[] {
                        "Product",
                        "LineProductID",
                        "ProductID",
                        "OrderLineItems",
                        "FK_Products",
                        "CASCADE",
                        "true"});
#line 11
 testRunner.Then("the table \"OrderLineItems\" should contain the following entity references", ((string)(null)), table2, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "EntitySetName",
                        "KeyColumn",
                        "ReferencedColumn",
                        "AssociatedRef",
                        "ForeignKeyName",
                        "DeleteRule"});
            table3.AddRow(new string[] {
                        "McOrdersSet",
                        "OrderID",
                        "LineOrderID",
                        "MyOrder",
                        "FK_Orders",
                        "CASCADE"});
#line 15
 testRunner.And("the table \"Orders\" should contain the following entity sets", ((string)(null)), table3, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Foreign Key Mapping 2")]
        public virtual void ForeignKeyMapping2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Foreign Key Mapping 2", ((string[])(null)));
#line 19
this.ScenarioSetup(scenarioInfo);
#line 20
 testRunner.Given("a connection to the \"SqlPlasticTestDB\" database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "ForeingKeyName",
                        "EntityRefName",
                        "EntitySetName",
                        "DeleteOnNull"});
            table4.AddRow(new string[] {
                        "FK_ManagerID",
                        "MyBoss",
                        "MyWorkers",
                        "true"});
#line 21
 testRunner.And("the following foreign key mapping rules for table \"dbo.Employees\"", ((string)(null)), table4, "And ");
#line 24
 testRunner.When("I generate models with the default options", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "EntityRefName",
                        "KeyColumn",
                        "ReferencedColumn",
                        "AssociatedSet",
                        "ForeignKeyName",
                        "DeleteRule",
                        "DeleteOnNull"});
            table5.AddRow(new string[] {
                        "MyBoss",
                        "ManagerEmployeeID",
                        "EmployeeID",
                        "MyWorkers",
                        "FK_ManagerID",
                        "NO_ACTION",
                        "true"});
#line 25
 testRunner.Then("the table \"Employees\" should contain the following entity references", ((string)(null)), table5, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "EntitySetName",
                        "KeyColumn",
                        "ReferencedColumn",
                        "AssociatedRef",
                        "ForeignKeyName",
                        "DeleteRule"});
            table6.AddRow(new string[] {
                        "MyWorkers",
                        "EmployeeID",
                        "ManagerEmployeeID",
                        "MyBoss",
                        "FK_ManagerID",
                        "NO_ACTION"});
#line 28
 testRunner.And("the table \"Employees\" should contain the following entity sets", ((string)(null)), table6, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
